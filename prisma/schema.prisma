generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  id         Int       @id @default(autoincrement())
  email      String    @unique(map: "email") @db.VarChar(255)
  password   String    @db.VarChar(255)
  role       String    @default("admin") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(0)
}

model page_visits {
  id         Int       @id @default(autoincrement())
  visitor_id String    @db.VarChar(255)
  path       String    @db.VarChar(255)
  timestamp  DateTime? @default(now()) @db.Timestamp(0)
  referrer   String?   @db.VarChar(255)
  visitors   visitors  @relation(fields: [visitor_id], references: [visitor_id], onDelete: Cascade, onUpdate: NoAction, map: "page_visits_ibfk_1")

  @@index([visitor_id], map: "visitor_id")
}

model services {
  id            Int             @id @default(autoincrement())
  slug          String          @unique(map: "slug") @db.VarChar(255)
  price         Decimal         @db.Decimal(10, 2)
  created_at    DateTime?       @default(now()) @db.Timestamp(0)
  updated_at    DateTime?       @default(now()) @db.Timestamp(0)
  delivery_type String?         @db.VarChar(50)
  description   String          @db.Text
  duration      String?         @db.VarChar(100)
  is_active     Boolean         @default(true)
  title         String          @db.VarChar(255)
  cart_items    cart_items[]
  service_media service_media[]
  order_items   order_items[]
}

model service_media {
  id         Int       @id @default(autoincrement())
  service_id Int
  media_type String    @db.VarChar(50)
  media_url  String    @db.VarChar(500)
  alt_text   String?   @db.VarChar(255)
  title      String?   @db.VarChar(255)
  sort_order Int       @default(0)
  is_primary Boolean   @default(false)
  is_active  Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  services   services  @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@index([service_id])
}

model users {
  id               Int       @id @default(autoincrement())
  name             String    @db.VarChar(255)
  email            String    @unique(map: "email") @db.VarChar(255)
  password         String    @db.VarChar(255)
  created_at       DateTime? @default(now()) @db.Timestamp(0)
  updated_at       DateTime? @default(now()) @db.Timestamp(0)
  google_id        String?   @db.VarChar(255)
  resetToken       String?   @db.VarChar(255)
  resetTokenExpiry DateTime?
  booking          booking[]
  cart             cart[]
  orders           orders[]
  user_addresses   user_addresses[]
}

model user_addresses {
  id           Int       @id @default(autoincrement())
  user_id      Int
  full_name    String    @db.VarChar(255)
  phone        String    @db.VarChar(20)
  address_line1 String   @db.VarChar(500)
  address_line2 String?  @db.VarChar(500)
  city         String    @db.VarChar(100)
  state        String    @db.VarChar(100)
  pincode      String    @db.VarChar(10)
  country      String    @default("India") @db.VarChar(100)
  address_type String    @default("home") @db.VarChar(50) // home, work, other
  is_default   Boolean   @default(false)
  is_active    Boolean   @default(true)
  created_at   DateTime  @default(now()) @db.Timestamp(0)
  updated_at   DateTime  @default(now()) @db.Timestamp(0)
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders       orders[]

  @@index([user_id])
  @@index([is_default])
  @@index([is_active])
}

model visitors {
  id          Int           @id @default(autoincrement())
  visitor_id  String        @unique(map: "visitor_id") @db.VarChar(255)
  first_visit DateTime?     @default(now()) @db.Timestamp(0)
  last_visit  DateTime?     @default(now()) @db.Timestamp(0)
  visit_count Int?          @default(1)
  page_visits page_visits[]
}

model astrologer {
  id                     Int                      @id @default(autoincrement())
  firstName              String
  lastName               String
  email                  String                   @unique(map: "Astrologer_email_key")
  phone                  String                   @unique(map: "Astrologer_phone_key")
  password               String
  areasOfExpertise       String
  yearsOfExperience      Int?
  bankName               String?
  accountNumber          String?
  ifscCode               String?
  profileImage           String?
  createdAt              DateTime                 @default(now())
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationStatus     String                   @default("unverified")
  about                  String?
  languages              String?
  pricePerChat           Decimal?                 @db.Decimal(10, 2)
  astrologeravailability astrologeravailability[]
  astrologerverification astrologerverification?
  booking                booking[]
}

model astrologeravailability {
  id           Int        @id @default(autoincrement())
  astrologerId Int
  date         DateTime
  start        String
  end          String
  repeat       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  astrologer   astrologer @relation(fields: [astrologerId], references: [id], map: "AstrologerAvailability_astrologerId_fkey")

  @@index([astrologerId], map: "AstrologerAvailability_astrologerId_fkey")
}

model astrologercertification {
  id                     Int                    @id @default(autoincrement())
  verificationId         Int
  courseName             String
  instituteName          String
  yearOfCompletion       String
  certificateFile        String
  remarks                String?
  status                 String?                @default("pending")
  astrologerverification astrologerverification @relation(fields: [verificationId], references: [id], map: "AstrologerCertification_verificationId_fkey")

  @@index([verificationId], map: "AstrologerCertification_verificationId_fkey")
}

model astrologereducation {
  id                     Int                    @id @default(autoincrement())
  verificationId         Int
  qualification          String
  fieldOfStudy           String
  universityName         String
  degreeFile             String
  remarks                String?
  status                 String?                @default("pending")
  astrologerverification astrologerverification @relation(fields: [verificationId], references: [id], map: "AstrologerEducation_verificationId_fkey")

  @@index([verificationId], map: "AstrologerEducation_verificationId_fkey")
}

model astrologerverification {
  id                      Int                       @id @default(autoincrement())
  astrologerId            Int                       @unique(map: "AstrologerVerification_astrologerId_key")
  aadharCard              String?
  panCard                 String?
  selfie                  String?
  workProof               String?
  declarationForm         String?
  addressProof            String?
  status                  String                    @default("unverified")
  adminRemarks            String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  aadharRemarks           String?
  aadharStatus            String?                   @default("unverified")
  addressRemarks          String?
  addressStatus           String?                   @default("unverified")
  declarationRemarks      String?
  declarationStatus       String?                   @default("unverified")
  panRemarks              String?
  panStatus               String?                   @default("unverified")
  selfieRemarks           String?
  selfieStatus            String?                   @default("unverified")
  workProofRemarks        String?
  workProofStatus         String?                   @default("unverified")
  astrologercertification astrologercertification[]
  astrologereducation     astrologereducation[]
  astrologer              astrologer                @relation(fields: [astrologerId], references: [id], map: "AstrologerVerification_astrologerId_fkey")
}

model booking {
  id           Int           @id @default(autoincrement())
  astrologerId Int
  clientId     Int
  date         DateTime
  type         String
  status       String
  remarks      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  chatEnabled  Boolean       @default(false)
  isPaid       Boolean       @default(false)
  paymentId    String?       @unique(map: "Booking_paymentId_key")
  sessionEnd   DateTime?
  sessionId    String?       @unique(map: "Booking_sessionId_key")
  sessionStart DateTime?
  videoEnabled Boolean       @default(false)
  astrologer   astrologer    @relation(fields: [astrologerId], references: [id], map: "Booking_astrologerId_fkey")
  users        users         @relation(fields: [clientId], references: [id], map: "Booking_clientId_fkey")
  chatmessage  chatmessage[]
  payment      payment[]
  session      session[]

  @@index([astrologerId], map: "Booking_astrologerId_fkey")
  @@index([clientId], map: "Booking_clientId_fkey")
}

model chatmessage {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  senderId    Int
  senderType  String
  message     String   @db.Text
  messageType String   @default("text")
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  booking     booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, map: "ChatMessage_bookingId_fkey")

  @@index([bookingId], map: "ChatMessage_bookingId_fkey")
}

model payment {
  id            Int      @id @default(autoincrement())
  bookingId     Int
  amount        Decimal  @db.Decimal(10, 2)
  currency      String   @default("INR")
  status        String   @default("pending")
  paymentMethod String   @default("mock")
  transactionId String?  @unique(map: "Payment_transactionId_key")
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  booking       booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, map: "Payment_bookingId_fkey")

  @@index([bookingId], map: "Payment_bookingId_fkey")
}

model session {
  id           Int       @id @default(autoincrement())
  sessionId    String    @unique(map: "Session_sessionId_key")
  bookingId    Int
  type         String
  status       String    @default("active")
  startTime    DateTime  @default(now())
  endTime      DateTime?
  participants Json?
  booking      booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade, map: "Session_bookingId_fkey")

  @@index([bookingId], map: "Session_bookingId_fkey")
}

model zodiac_signs {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  slug              String              @unique @db.VarChar(100)
  image_url         String?             @db.VarChar(500)
  created_at        DateTime?           @default(now()) @db.Timestamp(0)
  updated_at        DateTime?           @default(now()) @db.Timestamp(0)
  products          products[]
  zodiac_attributes zodiac_attributes[]
}

model categories {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  slug                String                @unique @db.VarChar(100)
  image_url           String?               @db.VarChar(500)
  created_at          DateTime?             @default(now()) @db.Timestamp(0)
  updated_at          DateTime?             @default(now()) @db.Timestamp(0)
  banner_url          String?               @db.VarChar(500)
  description         String?               @db.Text
  category_attributes category_attributes[]
  products            products[]
  subcategories       subcategories[]
}

model subcategories {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  slug        String     @db.VarChar(100)
  image_url   String?    @db.VarChar(500)
  category_id Int
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  updated_at  DateTime?  @default(now()) @db.Timestamp(0)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@index([category_id])
}

model attributes {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  slug                String                @unique @db.VarChar(100)
  type                String                @db.VarChar(50)
  description         String?               @db.Text
  is_required         Boolean               @default(false)
  is_filterable       Boolean               @default(false)
  is_searchable       Boolean               @default(false)
  sort_order          Int                   @default(0)
  created_at          DateTime?             @default(now()) @db.Timestamp(0)
  updated_at          DateTime?             @default(now()) @db.Timestamp(0)
  attribute_values    attribute_values[]
  category_attributes category_attributes[]
  product_attributes  product_attributes[]
  zodiac_attributes   zodiac_attributes[]
}

model attribute_values {
  id                       Int                        @id @default(autoincrement())
  attribute_id             Int
  value                    String                     @db.VarChar(255)
  slug                     String                     @db.VarChar(255)
  sort_order               Int                        @default(0)
  is_active                Boolean                    @default(true)
  created_at               DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at               DateTime?                  @default(now()) @db.Timestamp(0)
  attributes               attributes                 @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  product_attribute_values product_attribute_values[]

  @@unique([attribute_id, slug])
  @@index([attribute_id])
}

model products {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  description        String               @db.Text
  price              Decimal              @db.Decimal(10, 2)
  slug               String               @unique(map: "slug") @db.VarChar(255)
  available          Int?                 @default(0)
  created_at         DateTime?            @default(now()) @db.Timestamp(0)
  updated_at         DateTime?            @default(now()) @db.Timestamp(0)
  banner_url         String?              @db.VarChar(500)
  category_id        Int?
  image_url          String?              @db.VarChar(500)
  is_active          Boolean              @default(true)
  zodiac_id          Int?
  carats             Decimal?             @db.Decimal(10, 2)
  clarity            String?              @db.VarChar(50)
  color              String?              @db.VarChar(50)
  discount_price     Decimal?             @db.Decimal(10, 2)
  material           String?              @db.VarChar(50)
  mukhi              String?              @db.VarChar(50)
  original_price     Decimal?             @db.Decimal(10, 2)
  per_carat_price    Decimal?             @db.Decimal(10, 2)
  per_gram_price     Decimal?             @db.Decimal(10, 2)
  per_piece_price    Decimal?             @db.Decimal(10, 2)
  product_type       String?              @db.VarChar(50)
  quality            String?              @db.VarChar(50)
  quantity           Int?
  sku                String?              @unique @db.VarChar(100)
  weight             Decimal?             @db.Decimal(10, 3)
  cart_items         cart_items[]
  product_attributes product_attributes[]
  product_media      product_media[]
  product_meta       product_meta?
  product_pricing    product_pricing[]
  product_shipping   product_shipping?
  product_stock      product_stock[]
  order_items        order_items[]
  category           categories?          @relation(fields: [category_id], references: [id])
  zodiac             zodiac_signs?        @relation(fields: [zodiac_id], references: [id])

  @@index([category_id])
  @@index([zodiac_id])
}

model product_media {
  id         Int       @id @default(autoincrement())
  product_id Int
  media_type String    @db.VarChar(50)
  media_url  String    @db.VarChar(500)
  alt_text   String?   @db.VarChar(255)
  title      String?   @db.VarChar(255)
  sort_order Int       @default(0)
  is_primary Boolean   @default(false)
  is_active  Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
}

model product_stock {
  id           Int       @id @default(autoincrement())
  product_id   Int
  sku          String?   @unique @db.VarChar(100)
  quantity     Int       @default(0)
  reserved     Int       @default(0)
  min_stock    Int       @default(0)
  max_stock    Int?
  location     String?   @db.VarChar(100)
  batch_number String?   @db.VarChar(100)
  expiry_date  DateTime?
  cost_price   Decimal?  @db.Decimal(10, 2)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  products     products  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([product_id, sku])
  @@index([product_id])
}

model product_meta {
  id                  Int       @id @default(autoincrement())
  product_id          Int       @unique
  meta_title          String?   @db.VarChar(255)
  meta_description    String?   @db.Text
  meta_keywords       String?   @db.Text
  og_title            String?   @db.VarChar(255)
  og_description      String?   @db.Text
  og_image            String?   @db.VarChar(500)
  twitter_title       String?   @db.VarChar(255)
  twitter_description String?   @db.Text
  twitter_image       String?   @db.VarChar(500)
  canonical_url       String?   @db.VarChar(500)
  structured_data     Json?
  created_at          DateTime? @default(now()) @db.Timestamp(0)
  updated_at          DateTime? @default(now()) @db.Timestamp(0)
  products            products  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model product_pricing {
  id             Int       @id @default(autoincrement())
  product_id     Int
  base_price     Decimal   @db.Decimal(10, 2)
  sale_price     Decimal?  @db.Decimal(10, 2)
  discount_type  String?   @db.VarChar(20)
  discount_value Decimal?  @db.Decimal(10, 2)
  discount_start DateTime?
  discount_end   DateTime?
  is_active      Boolean   @default(true)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @db.Timestamp(0)
  products       products  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
}

model product_shipping {
  id                Int       @id @default(autoincrement())
  product_id        Int       @unique
  weight            Decimal?  @db.Decimal(10, 3)
  weight_unit       String    @default("kg") @db.VarChar(10)
  length            Decimal?  @db.Decimal(10, 2)
  width             Decimal?  @db.Decimal(10, 2)
  height            Decimal?  @db.Decimal(10, 2)
  dimension_unit    String    @default("cm") @db.VarChar(10)
  shipping_class    String?   @db.VarChar(50)
  is_free_shipping  Boolean   @default(false)
  shipping_cost     Decimal?  @db.Decimal(10, 2)
  max_shipping_cost Decimal?  @db.Decimal(10, 2)
  shipping_zones    Json?
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @db.Timestamp(0)
  products          products  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model product_attributes {
  id                       Int                        @id @default(autoincrement())
  product_id               Int
  attribute_id             Int
  created_at               DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at               DateTime?                  @default(now()) @db.Timestamp(0)
  product_attribute_values product_attribute_values[]
  attributes               attributes                 @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  products                 products                   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([product_id, attribute_id])
  @@index([product_id])
  @@index([attribute_id])
}

model product_attribute_values {
  id                   Int                @id @default(autoincrement())
  product_attribute_id Int
  attribute_value_id   Int?
  text_value           String?            @db.Text
  number_value         Decimal?           @db.Decimal(10, 2)
  boolean_value        Boolean?
  date_value           DateTime?
  created_at           DateTime?          @default(now()) @db.Timestamp(0)
  updated_at           DateTime?          @default(now()) @db.Timestamp(0)
  attribute_values     attribute_values?  @relation(fields: [attribute_value_id], references: [id])
  product_attributes   product_attributes @relation(fields: [product_attribute_id], references: [id], onDelete: Cascade)

  @@index([product_attribute_id])
  @@index([attribute_value_id])
}

model category_attributes {
  id           Int        @id @default(autoincrement())
  category_id  Int
  attribute_id Int
  is_required  Boolean    @default(false)
  sort_order   Int        @default(0)
  created_at   DateTime?  @default(now()) @db.Timestamp(0)
  updated_at   DateTime?  @default(now()) @db.Timestamp(0)
  attributes   attributes @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  categories   categories @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([category_id, attribute_id])
  @@index([category_id])
  @@index([attribute_id])
}

model zodiac_attributes {
  id           Int          @id @default(autoincrement())
  zodiac_id    Int
  attribute_id Int
  is_required  Boolean      @default(false)
  sort_order   Int          @default(0)
  created_at   DateTime?    @default(now()) @db.Timestamp(0)
  updated_at   DateTime?    @default(now()) @db.Timestamp(0)
  attributes   attributes   @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  zodiac_signs zodiac_signs @relation(fields: [zodiac_id], references: [id], onDelete: Cascade)

  @@unique([zodiac_id, attribute_id])
  @@index([zodiac_id])
  @@index([attribute_id])
}

model cart {
  id         Int          @id @default(autoincrement())
  user_id    Int
  created_at DateTime?    @default(now()) @db.Timestamp(0)
  updated_at DateTime?    @default(now()) @db.Timestamp(0)
  status     String       @default("active") @db.VarChar(50)
  users      users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart_items cart_items[]

  @@index([user_id], map: "cart_user_id_fkey")
}

model cart_items {
  id         Int       @id @default(autoincrement())
  cart_id    Int
  item_type  String    @db.VarChar(20)
  product_id Int?
  service_id Int?
  quantity   Int       @default(1)
  price      Decimal   @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  cart       cart      @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  products   products? @relation(fields: [product_id], references: [id])
  services   services? @relation(fields: [service_id], references: [id])
  order_items order_items[]

  @@unique([cart_id, item_type, product_id, service_id])
  @@index([cart_id])
  @@index([product_id])
  @@index([service_id])
}

model orders {
  id              Int          @id @default(autoincrement())
  user_id         Int
  address_id      Int?
  order_number    String       @unique @db.VarChar(50)
  status          String       @default("pending") @db.VarChar(50)
  total_amount    Decimal      @db.Decimal(10, 2)
  subtotal        Decimal      @db.Decimal(10, 2)
  tax_amount      Decimal?     @db.Decimal(10, 2)
  shipping_amount Decimal?     @db.Decimal(10, 2)
  discount_amount Decimal?     @db.Decimal(10, 2)
  payment_status  String       @default("pending") @db.VarChar(50)
  payment_method  String?      @db.VarChar(50)
  payment_id      String?      @unique @db.VarChar(255)
  shipping_address Json?
  billing_address  Json?
  notes           String?      @db.Text
  created_at      DateTime     @default(now()) @db.Timestamp(0)
  updated_at      DateTime     @default(now()) @db.Timestamp(0)
  users           users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_addresses  user_addresses? @relation(fields: [address_id], references: [id])
  order_items     order_items[]

  @@index([user_id])
  @@index([address_id])
  @@index([order_number])
  @@index([status])
  @@index([created_at])
}

model order_items {
  id           Int       @id @default(autoincrement())
  order_id     Int
  cart_item_id Int?
  item_type    String    @db.VarChar(20)
  product_id   Int?
  service_id   Int?
  name         String    @db.VarChar(255)
  description  String?   @db.Text
  quantity     Int       @default(1)
  unit_price   Decimal   @db.Decimal(10, 2)
  total_price  Decimal   @db.Decimal(10, 2)
  created_at   DateTime  @default(now()) @db.Timestamp(0)
  updated_at   DateTime  @default(now()) @db.Timestamp(0)
  orders       orders    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  cart_items   cart_items? @relation(fields: [cart_item_id], references: [id])
  products     products? @relation(fields: [product_id], references: [id])
  services     services? @relation(fields: [service_id], references: [id])

  @@index([order_id])
  @@index([product_id])
  @@index([service_id])
  @@index([cart_item_id])
}

model panchang_data {
  id                    Int       @id @default(autoincrement())
  date                  DateTime  @db.Date
  latitude              Decimal   @db.Decimal(10, 6)
  longitude             Decimal   @db.Decimal(10, 6)
  timezone              Decimal   @db.Decimal(4, 2)
  sun_rise              String    @db.VarChar(10)
  sun_set               String    @db.VarChar(10)
  weekday_number        Int
  weekday_name          String    @db.VarChar(20)
  vedic_weekday_number  Int
  vedic_weekday_name    String    @db.VarChar(20)
  lunar_month_number    Int
  lunar_month_name      String    @db.VarChar(50)
  lunar_month_full_name String    @db.VarChar(100)
  adhika                Int       @default(0)
  nija                  Int       @default(0)
  kshaya                Int       @default(0)
  ritu_number           Int
  ritu_name             String    @db.VarChar(50)
  aayanam               String    @db.VarChar(50)
  tithi_number          Int
  tithi_name            String    @db.VarChar(50)
  paksha                String    @db.VarChar(20)
  tithi_completes_at    DateTime?
  tithi_left_percentage Decimal?  @db.Decimal(5, 2)
  nakshatra_number      Int
  nakshatra_name        String    @db.VarChar(50)
  nakshatra_starts_at   DateTime?
  nakshatra_ends_at     DateTime?
  nakshatra_left_percentage Decimal? @db.Decimal(5, 2)
  saka_salivahana_number Int
  saka_salivahana_name_number Int
  saka_salivahana_year_name String @db.VarChar(50)
  vikram_chaitradi_number Int
  vikram_chaitradi_name_number Int
  vikram_chaitradi_year_name String @db.VarChar(50)
  created_at            DateTime  @default(now()) @db.Timestamp(0)
  updated_at            DateTime  @default(now()) @db.Timestamp(0)
  panchang_yogas        panchang_yogas[]
  panchang_karanas      panchang_karanas[]

  @@unique([date, latitude, longitude])
  @@index([date])
  @@index([latitude, longitude])
}

model panchang_yogas {
  id                    Int       @id @default(autoincrement())
  panchang_id           Int
  yoga_number           Int
  yoga_name             String    @db.VarChar(50)
  completion            DateTime?
  yoga_left_percentage  Decimal?  @db.Decimal(5, 2)
  created_at            DateTime  @default(now()) @db.Timestamp(0)
  panchang_data         panchang_data @relation(fields: [panchang_id], references: [id], onDelete: Cascade)

  @@index([panchang_id])
}

model panchang_karanas {
  id                    Int       @id @default(autoincrement())
  panchang_id           Int
  karana_number         Int
  karana_name           String    @db.VarChar(50)
  completion            DateTime?
  karana_left_percentage Decimal? @db.Decimal(5, 2)
  created_at            DateTime  @default(now()) @db.Timestamp(0)
  panchang_data         panchang_data @relation(fields: [panchang_id], references: [id], onDelete: Cascade)

  @@index([panchang_id])
}

/// Cache for D27 (Nakshatra) chart SVG responses based on full input parameters
model d27_chart_cache {
  id                Int       @id @default(autoincrement())
  cache_key         String    @unique @db.VarChar(300)
  year              Int
  month             Int
  date              Int
  hours             Int
  minutes           Int
  seconds           Int
  latitude          Decimal   @db.Decimal(10, 6)
  longitude         Decimal   @db.Decimal(10, 6)
  timezone          Decimal   @db.Decimal(4, 2)
  observation_point String    @db.VarChar(20) // "topocentric" or "geocentric"
  language          String    @db.VarChar(5)  // "en" or "te"
  svg_code          String    @db.LongText
  created_at        DateTime  @default(now()) @db.Timestamp(0)
  updated_at        DateTime  @default(now()) @db.Timestamp(0)
}

/// Cache for Ashtakoot (match-making) score responses
model ashtakoot_score_cache {
  id          Int       @id @default(autoincrement())
  cache_key   String    @unique @db.VarChar(300)
  language    String    @db.VarChar(5)
  request     Json
  response    Json
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  expires_at  DateTime  @db.Timestamp(0)

  @@index([expires_at])
}
