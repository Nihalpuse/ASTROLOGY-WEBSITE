generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  id         Int       @id @default(autoincrement())
  email      String    @unique(map: "email") @db.VarChar(255)
  password   String    @db.VarChar(255)
  role       String    @default("admin") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(0)
}

model cart {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int       @default(1)
  is_stone   Boolean   @default(false)
  is_service Boolean   @default(false)
  carats     Decimal?  @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cart_ibfk_1")

  @@index([product_id], map: "product_id")
  @@index([user_id], map: "user_id")
}

model order_addresses {
  id            Int       @id @default(autoincrement())
  order_id      Int
  full_name     String    @db.VarChar(255)
  address_line1 String    @db.VarChar(255)
  address_line2 String?   @db.VarChar(255)
  city          String    @db.VarChar(100)
  state         String    @db.VarChar(100)
  pincode       String    @db.VarChar(20)
  phone         String    @db.VarChar(20)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  orders        orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_addresses_ibfk_1")

  @@index([order_id], map: "order_id")
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int
  product_id Int
  is_stone   Boolean   @default(false)
  is_service Boolean   @default(false)
  quantity   Int
  carats     Decimal?  @db.Decimal(10, 2)
  price      Decimal   @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_ibfk_1")

  @@index([order_id], map: "order_id")
}

model orders {
  id                Int               @id @default(autoincrement())
  user_id           Int
  stripe_session_id String            @db.VarChar(255)
  total_amount      Decimal           @db.Decimal(10, 2)
  status            String            @default("pending") @db.VarChar(50)
  payment_method    String            @default("online") @db.VarChar(50)
  shipping_status   String?           @default("pending") @db.VarChar(50)
  address_id        Int?
  created_at        DateTime?         @default(now()) @db.Timestamp(0)
  updated_at        DateTime?         @default(now()) @db.Timestamp(0)
  order_addresses   order_addresses[]
  order_items       order_items[]
  users             users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_ibfk_1")
  user_addresses    user_addresses?   @relation(fields: [address_id], references: [id], onUpdate: NoAction, map: "orders_ibfk_2")

  @@index([address_id], map: "address_id")
  @@index([user_id], map: "user_id")
}

model page_visits {
  id         Int       @id @default(autoincrement())
  visitor_id String    @db.VarChar(255)
  path       String    @db.VarChar(255)
  timestamp  DateTime? @default(now()) @db.Timestamp(0)
  referrer   String?   @db.VarChar(255)
  visitors   visitors  @relation(fields: [visitor_id], references: [visitor_id], onDelete: Cascade, onUpdate: NoAction, map: "page_visits_ibfk_1")

  @@index([visitor_id], map: "visitor_id")
}

model products {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.Text
  price       Decimal   @db.Decimal(10, 2)
  slug        String    @unique(map: "slug") @db.VarChar(255)
  available   Int?      @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
}

model services {
  id             Int       @id @default(autoincrement())
  title_hi       String    @db.VarChar(255)
  title_en       String    @db.VarChar(255)
  slug           String    @unique(map: "slug") @db.VarChar(255)
  description_hi String    @db.Text
  description_en String    @db.Text
  price          Decimal   @db.Decimal(10, 2)
  icon_type      String    @db.VarChar(50)
  icon_path      String    @db.VarChar(255)
  benefits_hi    String?   @db.Text
  benefits_en    String?   @db.Text
  priority       Int?      @default(100)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @db.Timestamp(0)
}

model stones {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  name_en         String    @db.VarChar(255)
  zodiac          String    @db.VarChar(255)
  zodiac_en       String    @db.VarChar(255)
  benefits        String    @db.Text
  benefits_en     String    @db.Text
  price_per_carat Decimal   @db.Decimal(10, 2)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
}

model user_addresses {
  id            Int       @id @default(autoincrement())
  user_id       Int
  full_name     String    @db.VarChar(255)
  address_line1 String    @db.VarChar(255)
  address_line2 String?   @db.VarChar(255)
  city          String    @db.VarChar(100)
  state         String    @db.VarChar(100)
  pincode       String    @db.VarChar(20)
  phone         String    @db.VarChar(20)
  is_default    Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
  orders        orders[]
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_addresses_ibfk_1")

  @@index([user_id], map: "user_id")
}

model users {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  email            String           @unique(map: "email") @db.VarChar(255)
  password         String           @db.VarChar(255)
  created_at       DateTime?        @default(now()) @db.Timestamp(0)
  updated_at       DateTime?        @default(now()) @db.Timestamp(0)
  google_id        String?          @db.VarChar(255)
  resetToken       String?          @db.VarChar(255) // For password reset
  resetTokenExpiry DateTime?        // For password reset expiry
  cart             cart[]
  orders           orders[]
  user_addresses   user_addresses[]
  Booking          Booking[]
}

model visitors {
  id          Int           @id @default(autoincrement())
  visitor_id  String        @unique(map: "visitor_id") @db.VarChar(255)
  first_visit DateTime?     @default(now()) @db.Timestamp(0)
  last_visit  DateTime?     @default(now()) @db.Timestamp(0)
  visit_count Int?          @default(1)
  page_visits page_visits[]
}

model astrologer {
  id                     Int                      @id @default(autoincrement())
  firstName              String
  lastName               String
  email                  String                   @unique(map: "Astrologer_email_key")
  phone                  String                   @unique(map: "Astrologer_phone_key")
  password               String
  areasOfExpertise       String
  yearsOfExperience      Int?
  bankName               String?
  accountNumber          String?
  ifscCode               String?
  profileImage           String?
  createdAt              DateTime                 @default(now())
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationStatus     String                   @default("unverified")
  about                  String?
  languages              String?
  pricePerChat           Decimal?                 @db.Decimal(10, 2)
  astrologeravailability astrologeravailability[]
  astrologerverification astrologerverification?
  booking                booking[]
}

model astrologeravailability {
  id           Int        @id @default(autoincrement())
  astrologerId Int
  date         DateTime
  start        String
  end          String
  repeat       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  astrologer   astrologer @relation(fields: [astrologerId], references: [id], map: "AstrologerAvailability_astrologerId_fkey")

  @@index([astrologerId], map: "AstrologerAvailability_astrologerId_fkey")
}

model astrologercertification {
  id                     Int                    @id @default(autoincrement())
  verificationId         Int
  courseName             String
  instituteName          String
  yearOfCompletion       String
  certificateFile        String
  remarks                String?
  status                 String?                @default("pending")
  astrologerverification astrologerverification @relation(fields: [verificationId], references: [id], map: "AstrologerCertification_verificationId_fkey")

  @@index([verificationId], map: "AstrologerCertification_verificationId_fkey")
}

model astrologereducation {
  id                     Int                    @id @default(autoincrement())
  verificationId         Int
  qualification          String
  fieldOfStudy           String
  universityName         String
  degreeFile             String
  remarks                String?
  status                 String?                @default("pending")
  astrologerverification astrologerverification @relation(fields: [verificationId], references: [id], map: "AstrologerEducation_verificationId_fkey")

  @@index([verificationId], map: "AstrologerEducation_verificationId_fkey")
}

model astrologerverification {
  id                      Int                       @id @default(autoincrement())
  astrologerId            Int                       @unique(map: "AstrologerVerification_astrologerId_key")
  aadharCard              String?
  panCard                 String?
  selfie                  String?
  workProof               String?
  declarationForm         String?
  addressProof            String?
  status                  String                    @default("unverified")
  adminRemarks            String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  aadharRemarks           String?
  aadharStatus            String?                   @default("unverified")
  addressRemarks          String?
  addressStatus           String?                   @default("unverified")
  declarationRemarks      String?
  declarationStatus       String?                   @default("unverified")
  panRemarks              String?
  panStatus               String?                   @default("unverified")
  selfieRemarks           String?
  selfieStatus            String?                   @default("unverified")
  workProofRemarks        String?
  workProofStatus         String?                   @default("unverified")
  astrologercertification astrologercertification[]
  astrologereducation     astrologereducation[]
  astrologer              astrologer                @relation(fields: [astrologerId], references: [id], map: "AstrologerVerification_astrologerId_fkey")
}

model booking {
  id           Int           @id @default(autoincrement())
  astrologerId Int
  clientId     Int
  date         DateTime
  type         String
  status       String
  remarks      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  chatEnabled  Boolean       @default(false)
  isPaid       Boolean       @default(false)
  paymentId    String?       @unique(map: "Booking_paymentId_key")
  sessionEnd   DateTime?
  sessionId    String?       @unique(map: "Booking_sessionId_key")
  sessionStart DateTime?
  videoEnabled Boolean       @default(false)
  astrologer   astrologer    @relation(fields: [astrologerId], references: [id], map: "Booking_astrologerId_fkey")
  users        users         @relation(fields: [clientId], references: [id], map: "Booking_clientId_fkey")
  chatmessage  chatmessage[]
  payment      payment[]
  session      session[]

  @@index([astrologerId], map: "Booking_astrologerId_fkey")
  @@index([clientId], map: "Booking_clientId_fkey")
}

model chatmessage {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  senderId    Int
  senderType  String
  message     String   @db.Text
  messageType String   @default("text")
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  booking     booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, map: "ChatMessage_bookingId_fkey")

  @@index([bookingId], map: "ChatMessage_bookingId_fkey")
}

model payment {
  id            Int      @id @default(autoincrement())
  bookingId     Int
  amount        Decimal  @db.Decimal(10, 2)
  currency      String   @default("INR")
  status        String   @default("pending")
  paymentMethod String   @default("mock")
  transactionId String?  @unique(map: "Payment_transactionId_key")
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  booking       booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, map: "Payment_bookingId_fkey")

  @@index([bookingId], map: "Payment_bookingId_fkey")
}

model session {
  id           Int       @id @default(autoincrement())
  sessionId    String    @unique(map: "Session_sessionId_key")
  bookingId    Int
  type         String
  status       String    @default("active")
  startTime    DateTime  @default(now())
  endTime      DateTime?
  participants Json?
  booking      booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade, map: "Session_bookingId_fkey")

  @@index([bookingId], map: "Session_bookingId_fkey")
}
