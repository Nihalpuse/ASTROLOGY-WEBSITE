generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  id         Int       @id @default(autoincrement())
  email      String    @unique(map: "email") @db.VarChar(255)
  password   String    @db.VarChar(255)
  role       String    @default("admin") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(0)
}

model page_visits {
  id         Int       @id @default(autoincrement())
  visitor_id String    @db.VarChar(255)
  path       String    @db.VarChar(255)
  timestamp  DateTime? @default(now()) @db.Timestamp(0)
  referrer   String?   @db.VarChar(255)
  visitors   visitors  @relation(fields: [visitor_id], references: [visitor_id], onDelete: Cascade, onUpdate: NoAction, map: "page_visits_ibfk_1")

  @@index([visitor_id], map: "visitor_id")
}

model services {
  id             Int       @id @default(autoincrement())
  title_hi       String    @db.VarChar(255)
  title_en       String    @db.VarChar(255)
  slug           String    @unique(map: "slug") @db.VarChar(255)
  description_hi String    @db.Text
  description_en String    @db.Text
  price          Decimal   @db.Decimal(10, 2)
  icon_type      String    @db.VarChar(50)
  icon_path      String    @db.VarChar(255)
  benefits_hi    String?   @db.Text
  benefits_en    String?   @db.Text
  priority       Int?      @default(100)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @db.Timestamp(0)
}

model users {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  email            String           @unique(map: "email") @db.VarChar(255)
  password         String           @db.VarChar(255)
  created_at       DateTime?        @default(now()) @db.Timestamp(0)
  updated_at       DateTime?        @default(now()) @db.Timestamp(0)
  google_id        String?          @db.VarChar(255)
  resetToken       String?          @db.VarChar(255) // For password reset
  resetTokenExpiry DateTime?        // For password reset expiry
  booking          booking[]
}

model visitors {
  id          Int           @id @default(autoincrement())
  visitor_id  String        @unique(map: "visitor_id") @db.VarChar(255)
  first_visit DateTime?     @default(now()) @db.Timestamp(0)
  last_visit  DateTime?     @default(now()) @db.Timestamp(0)
  visit_count Int?          @default(1)
  page_visits page_visits[]
}

model astrologer {
  id                     Int                      @id @default(autoincrement())
  firstName              String
  lastName               String
  email                  String                   @unique(map: "Astrologer_email_key")
  phone                  String                   @unique(map: "Astrologer_phone_key")
  password               String
  areasOfExpertise       String
  yearsOfExperience      Int?
  bankName               String?
  accountNumber          String?
  ifscCode               String?
  profileImage           String?
  createdAt              DateTime                 @default(now())
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationStatus     String                   @default("unverified")
  about                  String?
  languages              String?
  pricePerChat           Decimal?                 @db.Decimal(10, 2)
  astrologeravailability astrologeravailability[]
  astrologerverification astrologerverification?
  booking                booking[]
}

model astrologeravailability {
  id           Int        @id @default(autoincrement())
  astrologerId Int
  date         DateTime
  start        String
  end          String
  repeat       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  astrologer   astrologer @relation(fields: [astrologerId], references: [id], map: "AstrologerAvailability_astrologerId_fkey")

  @@index([astrologerId], map: "AstrologerAvailability_astrologerId_fkey")
}

model astrologercertification {
  id                     Int                    @id @default(autoincrement())
  verificationId         Int
  courseName             String
  instituteName          String
  yearOfCompletion       String
  certificateFile        String
  remarks                String?
  status                 String?                @default("pending")
  astrologerverification astrologerverification @relation(fields: [verificationId], references: [id], map: "AstrologerCertification_verificationId_fkey")

  @@index([verificationId], map: "AstrologerCertification_verificationId_fkey")
}

model astrologereducation {
  id                     Int                    @id @default(autoincrement())
  verificationId         Int
  qualification          String
  fieldOfStudy           String
  universityName         String
  degreeFile             String
  remarks                String?
  status                 String?                @default("pending")
  astrologerverification astrologerverification @relation(fields: [verificationId], references: [id], map: "AstrologerEducation_verificationId_fkey")

  @@index([verificationId], map: "AstrologerEducation_verificationId_fkey")
}

model astrologerverification {
  id                      Int                       @id @default(autoincrement())
  astrologerId            Int                       @unique(map: "AstrologerVerification_astrologerId_key")
  aadharCard              String?
  panCard                 String?
  selfie                  String?
  workProof               String?
  declarationForm         String?
  addressProof            String?
  status                  String                    @default("unverified")
  adminRemarks            String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  aadharRemarks           String?
  aadharStatus            String?                   @default("unverified")
  addressRemarks          String?
  addressStatus           String?                   @default("unverified")
  declarationRemarks      String?
  declarationStatus       String?                   @default("unverified")
  panRemarks              String?
  panStatus               String?                   @default("unverified")
  selfieRemarks           String?
  selfieStatus            String?                   @default("unverified")
  workProofRemarks        String?
  workProofStatus         String?                   @default("unverified")
  astrologercertification astrologercertification[]
  astrologereducation     astrologereducation[]
  astrologer              astrologer                @relation(fields: [astrologerId], references: [id], map: "AstrologerVerification_astrologerId_fkey")
}

model booking {
  id           Int           @id @default(autoincrement())
  astrologerId Int
  clientId     Int
  date         DateTime
  type         String
  status       String
  remarks      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  chatEnabled  Boolean       @default(false)
  isPaid       Boolean       @default(false)
  paymentId    String?       @unique(map: "Booking_paymentId_key")
  sessionEnd   DateTime?
  sessionId    String?       @unique(map: "Booking_sessionId_key")
  sessionStart DateTime?
  videoEnabled Boolean       @default(false)
  astrologer   astrologer    @relation(fields: [astrologerId], references: [id], map: "Booking_astrologerId_fkey")
  users        users         @relation(fields: [clientId], references: [id], map: "Booking_clientId_fkey")
  chatmessage  chatmessage[]
  payment      payment[]
  session      session[]

  @@index([astrologerId], map: "Booking_astrologerId_fkey")
  @@index([clientId], map: "Booking_clientId_fkey")
}

model chatmessage {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  senderId    Int
  senderType  String
  message     String   @db.Text
  messageType String   @default("text")
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  booking     booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, map: "ChatMessage_bookingId_fkey")

  @@index([bookingId], map: "ChatMessage_bookingId_fkey")
}

model payment {
  id            Int      @id @default(autoincrement())
  bookingId     Int
  amount        Decimal  @db.Decimal(10, 2)
  currency      String   @default("INR")
  status        String   @default("pending")
  paymentMethod String   @default("mock")
  transactionId String?  @unique(map: "Payment_transactionId_key")
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  booking       booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, map: "Payment_bookingId_fkey")

  @@index([bookingId], map: "Payment_bookingId_fkey")
}

model session {
  id           Int       @id @default(autoincrement())
  sessionId    String    @unique(map: "Session_sessionId_key")
  bookingId    Int
  type         String
  status       String    @default("active")
  startTime    DateTime  @default(now())
  endTime      DateTime?
  participants Json?
  booking      booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade, map: "Session_bookingId_fkey")

  @@index([bookingId], map: "Session_bookingId_fkey")
}

model zodiac_signs {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  slug      String   @unique @db.VarChar(100)
  image_url String?  @db.VarChar(500)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  zodiac_attributes zodiac_attributes[]
  products products[]
}

model categories {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  slug        String        @unique @db.VarChar(100)
  description String?       @db.Text
  image_url   String?       @db.VarChar(500)
  banner_url  String?       @db.VarChar(500)
  created_at  DateTime?     @default(now()) @db.Timestamp(0)
  updated_at  DateTime?     @default(now()) @db.Timestamp(0)
  subcategories subcategories[]
  category_attributes category_attributes[]
  products products[]
}

model subcategories {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(100)
  slug         String    @db.VarChar(100)
  image_url    String?   @db.VarChar(500)
  category_id  Int
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  categories   categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  
  @@index([category_id])
}

model attributes {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  type        String    @db.VarChar(50) // 'text', 'select', 'multiselect', 'number', 'boolean', 'date'
  description String?   @db.Text
  is_required Boolean   @default(false)
  is_filterable Boolean @default(false)
  is_searchable Boolean @default(false)
  sort_order  Int       @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  attribute_values attribute_values[]
  product_attributes product_attributes[]
  category_attributes category_attributes[]
  zodiac_attributes zodiac_attributes[]
}

model attribute_values {
  id           Int       @id @default(autoincrement())
  attribute_id Int
  value        String    @db.VarChar(255)
  slug         String    @db.VarChar(255)
  sort_order   Int       @default(0)
  is_active    Boolean   @default(true)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  attributes   attributes @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  product_attribute_values product_attribute_values[]
  
  @@index([attribute_id])
  @@unique([attribute_id, slug])
}

model products {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.Text
  price       Decimal   @db.Decimal(10, 2)
  slug        String    @unique(map: "slug") @db.VarChar(255)
  available   Int?      @default(0)
  category_id Int?
  zodiac_id   Int?
  image_url   String?   @db.VarChar(500)
  banner_url  String?   @db.VarChar(500)
  is_active   Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  category    categories? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  zodiac      zodiac_signs? @relation(fields: [zodiac_id], references: [id], onDelete: SetNull)
  product_attributes product_attributes[]
  product_media product_media[]
  product_stock product_stock[]
  product_meta product_meta?
  product_pricing product_pricing[]
  product_shipping product_shipping?
  
  @@index([category_id])
  @@index([zodiac_id])
}

model product_media {
  id          Int       @id @default(autoincrement())
  product_id  Int
  media_type  String    @db.VarChar(50) // 'image', 'video', 'document'
  media_url   String    @db.VarChar(500)
  alt_text    String?   @db.VarChar(255)
  title       String?   @db.VarChar(255)
  sort_order  Int       @default(0)
  is_primary  Boolean   @default(false)
  is_active   Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@index([product_id])
}

model product_stock {
  id          Int       @id @default(autoincrement())
  product_id  Int
  sku         String?   @unique @db.VarChar(100)
  quantity    Int       @default(0)
  reserved    Int       @default(0)
  min_stock   Int       @default(0)
  max_stock   Int?
  location    String?   @db.VarChar(100)
  batch_number String?  @db.VarChar(100)
  expiry_date DateTime?
  cost_price  Decimal?  @db.Decimal(10, 2)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@unique([product_id, sku])
  @@index([product_id])
}

model product_meta {
  id              Int       @id @default(autoincrement())
  product_id      Int       @unique
  meta_title      String?   @db.VarChar(255)
  meta_description String?  @db.Text
  meta_keywords   String?   @db.Text
  og_title        String?   @db.VarChar(255)
  og_description  String?   @db.Text
  og_image        String?   @db.VarChar(500)
  twitter_title   String?   @db.VarChar(255)
  twitter_description String? @db.Text
  twitter_image   String?   @db.VarChar(500)
  canonical_url   String?   @db.VarChar(500)
  structured_data Json?
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  products        products   @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model product_pricing {
  id              Int       @id @default(autoincrement())
  product_id      Int
  base_price      Decimal   @db.Decimal(10, 2)
  sale_price      Decimal?  @db.Decimal(10, 2)
  discount_type   String?   @db.VarChar(20) // 'percentage', 'fixed'
  discount_value  Decimal?  @db.Decimal(10, 2)
  discount_start  DateTime?
  discount_end    DateTime?
  is_active       Boolean   @default(true)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  products        products   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@index([product_id])
}

model product_shipping {
  id              Int       @id @default(autoincrement())
  product_id      Int       @unique
  weight          Decimal?  @db.Decimal(10, 3) // Weight in kg
  weight_unit     String    @default("kg") @db.VarChar(10) // kg, g, lb
  length          Decimal?  @db.Decimal(10, 2) // Length in cm
  width           Decimal?  @db.Decimal(10, 2) // Width in cm
  height          Decimal?  @db.Decimal(10, 2) // Height in cm
  dimension_unit  String    @default("cm") @db.VarChar(10) // cm, in
  shipping_class  String?   @db.VarChar(50) // Standard, Express, Free, Heavy
  is_free_shipping Boolean  @default(false)
  shipping_cost   Decimal?  @db.Decimal(10, 2) // Fixed shipping cost
  max_shipping_cost Decimal? @db.Decimal(10, 2) // Maximum shipping cost for variable rates
  shipping_zones  Json?     // JSON array of shipping zone IDs
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  products        products   @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model product_attributes {
  id         Int       @id @default(autoincrement())
  product_id Int
  attribute_id Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  products   products   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  attributes attributes @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  product_attribute_values product_attribute_values[]
  
  @@unique([product_id, attribute_id])
  @@index([product_id])
  @@index([attribute_id])
}

model product_attribute_values {
  id                    Int       @id @default(autoincrement())
  product_attribute_id  Int
  attribute_value_id    Int?
  text_value            String?   @db.Text
  number_value          Decimal?  @db.Decimal(10, 2)
  boolean_value         Boolean?
  date_value            DateTime?
  created_at            DateTime? @default(now()) @db.Timestamp(0)
  updated_at            DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  product_attributes    product_attributes @relation(fields: [product_attribute_id], references: [id], onDelete: Cascade)
  attribute_values      attribute_values? @relation(fields: [attribute_value_id], references: [id], onDelete: SetNull)
  
  @@index([product_attribute_id])
  @@index([attribute_value_id])
}

model category_attributes {
  id           Int       @id @default(autoincrement())
  category_id  Int
  attribute_id Int
  is_required  Boolean   @default(false)
  sort_order   Int       @default(0)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  categories   categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  attributes   attributes @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  
  @@unique([category_id, attribute_id])
  @@index([category_id])
  @@index([attribute_id])
}

model zodiac_attributes {
  id           Int       @id @default(autoincrement())
  zodiac_id    Int
  attribute_id Int
  is_required  Boolean   @default(false)
  sort_order   Int       @default(0)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  
  // Relations
  zodiac_signs zodiac_signs @relation(fields: [zodiac_id], references: [id], onDelete: Cascade)
  attributes   attributes   @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  
  @@unique([zodiac_id, attribute_id])
  @@index([zodiac_id])
  @@index([attribute_id])
}
