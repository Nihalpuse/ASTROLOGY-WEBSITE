generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  id         Int       @id @default(autoincrement())
  email      String    @unique(map: "email") @db.VarChar(255)
  password   String    @db.VarChar(255)
  role       String    @default("admin") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(0)
}

model cart {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int       @default(1)
  is_stone   Boolean   @default(false)
  is_service Boolean   @default(false)
  carats     Decimal?  @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cart_ibfk_1")

  @@index([product_id], map: "product_id")
  @@index([user_id], map: "user_id")
}

model order_addresses {
  id            Int       @id @default(autoincrement())
  order_id      Int
  full_name     String    @db.VarChar(255)
  address_line1 String    @db.VarChar(255)
  address_line2 String?   @db.VarChar(255)
  city          String    @db.VarChar(100)
  state         String    @db.VarChar(100)
  pincode       String    @db.VarChar(20)
  phone         String    @db.VarChar(20)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  orders        orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_addresses_ibfk_1")

  @@index([order_id], map: "order_id")
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int
  product_id Int
  is_stone   Boolean   @default(false)
  is_service Boolean   @default(false)
  quantity   Int
  carats     Decimal?  @db.Decimal(10, 2)
  price      Decimal   @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_ibfk_1")

  @@index([order_id], map: "order_id")
}

model orders {
  id                Int               @id @default(autoincrement())
  user_id           Int
  stripe_session_id String            @db.VarChar(255)
  total_amount      Decimal           @db.Decimal(10, 2)
  status            String            @default("pending") @db.VarChar(50)
  payment_method    String            @default("online") @db.VarChar(50)
  shipping_status   String?           @default("pending") @db.VarChar(50)
  address_id        Int?
  created_at        DateTime?         @default(now()) @db.Timestamp(0)
  updated_at        DateTime?         @default(now()) @db.Timestamp(0)
  order_addresses   order_addresses[]
  order_items       order_items[]
  users             users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_ibfk_1")
  user_addresses    user_addresses?   @relation(fields: [address_id], references: [id], onUpdate: NoAction, map: "orders_ibfk_2")

  @@index([address_id], map: "address_id")
  @@index([user_id], map: "user_id")
}

model page_visits {
  id         Int       @id @default(autoincrement())
  visitor_id String    @db.VarChar(255)
  path       String    @db.VarChar(255)
  timestamp  DateTime? @default(now()) @db.Timestamp(0)
  referrer   String?   @db.VarChar(255)
  visitors   visitors  @relation(fields: [visitor_id], references: [visitor_id], onDelete: Cascade, onUpdate: NoAction, map: "page_visits_ibfk_1")

  @@index([visitor_id], map: "visitor_id")
}

model products {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.Text
  price       Decimal   @db.Decimal(10, 2)
  slug        String    @unique(map: "slug") @db.VarChar(255)
  available   Int?      @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
}

model services {
  id             Int       @id @default(autoincrement())
  title_hi       String    @db.VarChar(255)
  title_en       String    @db.VarChar(255)
  slug           String    @unique(map: "slug") @db.VarChar(255)
  description_hi String    @db.Text
  description_en String    @db.Text
  price          Decimal   @db.Decimal(10, 2)
  icon_type      String    @db.VarChar(50)
  icon_path      String    @db.VarChar(255)
  benefits_hi    String?   @db.Text
  benefits_en    String?   @db.Text
  priority       Int?      @default(100)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @db.Timestamp(0)
}

model stones {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  name_en         String    @db.VarChar(255)
  zodiac          String    @db.VarChar(255)
  zodiac_en       String    @db.VarChar(255)
  benefits        String    @db.Text
  benefits_en     String    @db.Text
  price_per_carat Decimal   @db.Decimal(10, 2)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
}

model user_addresses {
  id            Int       @id @default(autoincrement())
  user_id       Int
  full_name     String    @db.VarChar(255)
  address_line1 String    @db.VarChar(255)
  address_line2 String?   @db.VarChar(255)
  city          String    @db.VarChar(100)
  state         String    @db.VarChar(100)
  pincode       String    @db.VarChar(20)
  phone         String    @db.VarChar(20)
  is_default    Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
  orders        orders[]
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_addresses_ibfk_1")

  @@index([user_id], map: "user_id")
}

model users {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  email          String           @unique(map: "email") @db.VarChar(255)
  password       String           @db.VarChar(255)
  created_at     DateTime?        @default(now()) @db.Timestamp(0)
  updated_at     DateTime?        @default(now()) @db.Timestamp(0)
  google_id      String?          @db.VarChar(255)
  cart           cart[]
  orders         orders[]
  user_addresses user_addresses[]
  Booking        Booking[]
}

model visitors {
  id          Int           @id @default(autoincrement())
  visitor_id  String        @unique(map: "visitor_id") @db.VarChar(255)
  first_visit DateTime?     @default(now()) @db.Timestamp(0)
  last_visit  DateTime?     @default(now()) @db.Timestamp(0)
  visit_count Int?          @default(1)
  page_visits page_visits[]
}

model Astrologer {
  id                     Int                      @id @default(autoincrement())
  firstName              String
  lastName               String
  email                  String                   @unique
  phone                  String                   @unique
  password               String
  areasOfExpertise       String // Comma-separated
  yearsOfExperience      Int?
  bankName               String?
  accountNumber          String?
  ifscCode               String?
  profileImage           String?
  about                  String? // Astrologer about section
  pricePerChat           Decimal?                 @db.Decimal(10, 2) // Price per chat
  languages              String? // Comma-separated language codes
  createdAt              DateTime                 @default(now())
  resetToken             String? // For password reset
  resetTokenExpiry       DateTime? // For password reset expiry
  verificationStatus     String                   @default("unverified") // unverified, pending, approved, rejected
  verification           AstrologerVerification?
  AstrologerAvailability AstrologerAvailability[]
  Booking                Booking[]
}

model AstrologerVerification {
  id                 Int                       @id @default(autoincrement())
  astrologerId       Int                       @unique
  aadharCard         String? // File URL
  aadharStatus       String?                   @default("unverified") // unverified, pending, accepted, rejected
  aadharRemarks      String?
  panCard            String? // File URL
  panStatus          String?                   @default("unverified")
  panRemarks         String?
  selfie             String? // File URL
  selfieStatus       String?                   @default("unverified")
  selfieRemarks      String?
  workProof          String? // File URL (experience letter, screenshots, etc.)
  workProofStatus    String?                   @default("unverified")
  workProofRemarks   String?
  declarationForm    String? // File URL
  declarationStatus  String?                   @default("unverified")
  declarationRemarks String?
  addressProof       String? // File URL (optional)
  addressStatus      String?                   @default("unverified")
  addressRemarks     String?
  status             String                    @default("unverified") // unverified, pending, approved, rejected
  adminRemarks       String?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  astrologer         Astrologer                @relation(fields: [astrologerId], references: [id])
  certifications     AstrologerCertification[]
  educations         AstrologerEducation[]
}

model AstrologerCertification {
  id               Int                    @id @default(autoincrement())
  verificationId   Int
  courseName       String
  instituteName    String
  yearOfCompletion String
  certificateFile  String // File URL (PDF/JPG)
  status           String?                @default("pending") // unverified, pending, accepted, rejected
  remarks          String?
  verification     AstrologerVerification @relation(fields: [verificationId], references: [id])
}

model AstrologerEducation {
  id             Int                    @id @default(autoincrement())
  verificationId Int
  qualification  String
  fieldOfStudy   String
  universityName String
  degreeFile     String // File URL (PDF/JPG)
  status         String?                @default("pending") // unverified, pending, accepted, rejected
  remarks        String?
  verification   AstrologerVerification @relation(fields: [verificationId], references: [id])
}

model AstrologerAvailability {
  id           Int        @id @default(autoincrement())
  astrologerId Int
  date         DateTime
  start        String // Store as "HH:mm"
  end          String // Store as "HH:mm"
  repeat       String // "None", "Daily", "Weekly"
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  astrologer   Astrologer @relation(fields: [astrologerId], references: [id])
}

model Booking {
  id           Int       @id @default(autoincrement())
  astrologerId Int
  clientId     Int
  date         DateTime
  type         String
  status       String // 'upcoming', 'past', 'accepted', 'rejected', 'rescheduled'
  remarks      String? // For rejection or reschedule notes
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isPaid       Boolean   @default(false)
  paymentId    String?   @unique
  sessionId    String?   @unique
  chatEnabled  Boolean   @default(false)
  videoEnabled Boolean   @default(false)
  sessionStart DateTime?
  sessionEnd   DateTime?

  astrologer Astrologer    @relation(fields: [astrologerId], references: [id])
  client     users         @relation(fields: [clientId], references: [id])
  messages   ChatMessage[]
  payments   Payment[]
  Session    Session[]
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  senderId    Int
  senderType  String // 'client' or 'astrologer'
  message     String   @db.Text
  messageType String   @default("text") // 'text', 'image', 'file'
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Payment {
  id            Int      @id @default(autoincrement())
  bookingId     Int
  amount        Decimal  @db.Decimal(10, 2)
  currency      String   @default("INR")
  status        String   @default("pending") // 'pending', 'completed', 'failed', 'refunded'
  paymentMethod String   @default("mock") // 'mock', 'stripe', 'razorpay'
  transactionId String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionId    String    @unique
  bookingId    Int
  type         String // 'chat', 'video', 'both'
  status       String    @default("active") // 'active', 'ended', 'expired'
  startTime    DateTime  @default(now())
  endTime      DateTime?
  participants Json? // Store participant info as JSON

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}
